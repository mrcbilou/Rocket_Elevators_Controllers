// Inventory // 

//findelevators with floor and direction

//current_direction = "UP" or "DOWN"
//call_button = Exterior button that calls an elevator_cage in a column
//elevator_cage = The elevator itself
//current_required_floor = The floor in wich a call_button has been pressed
//responding_elevator_cage = The cage that is the closest to the caller determined by the distance between current_required_floor and the current_direction of the cage "the closest awnsers"
//cage_doors = The function of the doors opening
//close_doors = The function of the doors closing
//floor_selection_button = The buttons inside the elevator that allows user to choose the floor they need to go to 
//target_floor = floor the user has selected using floor_selection_button
//current_floor = The floor at witch the elevator_cage is currently sitting
//ground_floor = Ground floor of the building "refers to floor GF"
//countdown_timer = Timer for elevator doors 
//"destination floor ???"
// requested_floor= based on floor_selection_button 


DEFINE Column USING id AND status:
    ID: column,
    Status: online, offline
    ElevatorList: SET to empty List
    SEQUENCE createElevatorList USING cage_amount
        [cageA]
        [cageB]
    ENDSEQUENCE
ENDDEFINE
FOR EACH elevator_cage
    SET column "number" TO INSTANTIATE column with "number" and online
    SET column "number" TO offline
ENDFOR
SET column1 TO INSTANTIATE Column WITH 1 AND online
SET column1 status TO offline


DEFINE elevator_cage USING id , direction and status 
    ID : "elevator_cage",
    Status : moving, idle
    ElevatorCageList: SET to empty List
    SEQUENCE createElevatorCageList USING cage_amount
        [elevator_cageA]
        [elevator_cageB]
    ENDSEQUENCE
ENDDEFINE
FOR EACH elevator_cage
    SET elevator_cage "letter" TO INSTANTIATE elevator_cage with "letter" and moving
    SET elevator_cage "letter" TO Idle
ENDFOR




DEFINE call_button_up USING id AND status:
    ID: call_button_up,
    Status: pressed, not pressed
ENDDEFINE
FOR EACH call_button_up
    SET call_button_up TO INSTANTIATE call_button_up with pressed
    SET call_button_up TO closed
ENDFOR



DEFINE call_button_down USING id AND status:
    ID: call_button_down,
    Status: pressed, not pressed
ENDDEFINE
FOR EACH call_button_down
    SET call_button_down TO INSTANTIATE call_button_down with pressed
    SET call_button_down TO closed
ENDFOR




DEFINE cage_doors USING id AND status:
    ID: cage_doors,
    Status: opened, closed
     CageDoorList: SET to empty List
    SEQUENCE createCageDoorList USING cage_amount
        [cageDoorA]
        [cageDoorB]
    ENDSEQUENCE
ENDDEFINE
FOR EACH cage_doors
    SET cage"letter" TO INSTANTIATE cage with "letter" and opened
    SET cage"letter" TO closed
ENDFOR



DEFINE floor_doors USING id AND status:
    ID: doors,
    Status: opened, closed
    FloorDoorList: SET to empty List
    SEQUENCE createFloorDoorList USING floor_amount
        [floorDoor1A]
        [floorDoor1B]
        [floorDoor2A]
        [floorDoor2B]
        [floorDoor3A]
        [floorDoor3B]
        [floorDoor4A]
        [floorDoor4B]
        [floorDoor5A]
        [floorDoor5B]
        [floorDoor6A]
        [floorDoor6B]
        [floorDoor7A]
        [floorDoor7B]
        [floorDoor8A]
        [floorDoor8B]
        [floorDoor9A]
        [floorDoor9B]
        [floorDoor10A]
        [floorDoor10B]
    ENDSEQUENCE
ENDDEFINE
FOR EACH floor_doors
    SET floorDoor"number"A TO INSTANTIATE floorDoor with "number"A and opened
    SET floorDoor"number"A TO closed
    SET floorDoor"number"B TO INSTANTIATE floorDoor with "number"B and opened
    SET floorDoor"number"B TO closed
ENDFOR


DEFINE floor_selection_button USING id AND status:
    ID: floor_selection_button,
    Status: pressed, not pressed
    FloorList: SET to empty List
    SEQUENCE createFloorList USING floor_amount
        [floor1]
        [floor2]
        [floor3]
        [floor4]
        [floor5]
        [floor6]
        [floor7]
        [floor8]
        [floor9]
        [floor10]
    ENDSEQUENCE
ENDDEFINE
FOR EACH floor_selection_button
    SET floor"number" TO INSTANTIATE floor with "number" and pressed
    SET floor"number" TO  not_pressed
ENDFOR













SEQUENCE requestElevator USING current_required_floor and current_direction 
    SET current_required_floor TO "3"
    SET current _direction TO "UP"
    IF call_button is pressed 
        READ current_required_floor 
        SET destination_floor TO current_required_floor   
        DETERMINE responding_elevator_cage USING current_required_floor and current_direction
        CONTACT responding_elevator_cage 
    ENDIF
    CALL boardingElevator
ENDSEQUENCE




SEQUENCE boardingElevator USING current_floor, target_floor and current_required_floor
    WHEN elevator_cage EQUALS current_required_floor 
        SET cage_doors TO "OPENED"
    IF floor_selection_button is pressed THEN INIT 5 second countdown
            WHEN 5 second countdown is done
                SET cage_doors TO "CLOSED"
               "SET elevator_cage TO target_floor"
                IF call_button is pressed between target_floor and current_floor
                    SET cage_doors TO "OPENED"
                    SET countdown_timer TO 5 seconds
                    INIT countdown_timer
                         WHEN 5 second countdown is done
                             SET cage_doors TO "CLOSED"
                    ELSE go to target_floor 
                        SET cage_doors TO "OPENED"
                        SET countdown_timer TO 5 second
                            INIT countdown_timer
                            ON countdown_timer END 
                            SET cage_doors TO "CLOSED" 
                ENDIF  
        
    ELSE
         INIT 5 second countdown
            WHEN 5 second countdown is done
                SET cage_doors TO "CLOSED"

    ENDIF

REPEAT 
    SEQUENCE #2 
UNTIL 
    no buttons are pressed
ENDSEQUENCE

SEQUENCE 
    IF no buttons are pressed AND elevator_cage are inactive FOR 15 minutes
        elevator_cage goes back to ground_floor "floor GF"
    ENDIF
    SET current_floor TO 1 
ENDSEQUENCE

        

