
"<------------------COLUMN DEFINITION---------------------->"
DEFINE Column USING id AND floor_amount AND _minimumFloor AND _maximumFloor
    ID: id,
    Status: online
    floor_amount : _floorAmount
    min floor :_minimumFloor
    max floor : _maximumFloor

'<------------------LIST OF ALL CALL BUTTON ---------------------->
    CallButtonList: SET TO empty List
    SEQUENCE createCallButtonList USING _minimumFloor AND _maximum_Floor AND floor_amount
     SET iterator TO _minimumFloor
       FOR floor_amount
                    IF iterator IS EQUAL TO _minimumFloor
                        ADD(INSTANTIATE call_button WITH up AND iterator) TO CallButtonList
                    ENDIF
                    IF iterator IS EQUAL TO _maximum_Floor
                        ADD(INSTANTIATE call_button WITH down AND iterator)
                    ENDIF
                    IF iterator IS NOT EQUAL TO _minimumFloor AND IS NOT EQUAL TO _maximum_Floor
                         ADD(INSTANTIATE call_button WITH up AND down AND iterator) TO CallButtonList
                    ENDIF
            INCREMENT iterator by 1
        ENDFOR
    ENDSEQUENCE

   
'<------------------SEQUENCE TO REQUEST AN ELEVATOR---------------------->
    SEQUENCE requestElevator USING requested_floor   
        CALL findBestElevator OF column RETURNING elevator
        ADD requested_floor TO request_list Of elevator
        CALL moveElevator WITH elevator
        CALL openDoors WITH elevator
    ENDSEQUENCE

    CALL createCallButtonList WITH battery_lowest_floor AND floor_amount
    CALL requestElevator WITH requested_floor

'<------------------LIST OF ALL THE ELEVATOR IN THE COLUMN---------------------->
    ElevatorList: SET to empty List
    SEQUENCE createElevatorList USING elevator_amount
     SET iterator TO 1
        FOR elevator_amount
            ADD ( INSTANTIATE elevator WITH iterator AND "online" ) TO ElevatorList
            INCREMENT iterator
        ENDFOR
    ENDSEQUENCE

'<------------------LIST OF ALL THE FLOOR INDICATORS IN THE ELEVATORS---------------------->
    FloorIndicatorList: SET TO empty List
     SEQUENCE createFloorIndicatorList USING elevator_amount AND current_floor
     SET iterator TO 1
        FOR elevator_amount
            ADD ( INSTANTIATE floor_indicator WITH iterator AND "on" ) TO FloorIndicatorList
            INCREMENT iterator
        ENDFOR
    ENDSEQUENCE


'<------------------SEQUENCE THAT RETURNS THE BEST POSSIBLE ELEVATOR---------------------->
    SEQUENCE findBestElevator USING requested_floor AND current_direction AND current_floor 
    FOR EACH elevator in column.ElevatorList
        IF current_direction IS down AND current_floor IS GREATER THAN current_required_floor 
        ENDIF
        IF current_direction IS up AND current_floor IS SMALLER THAN current_required_floor
        ENDIF
        RETURN best_elevator
    ENDFOR
    ENDSEQUENCE

'<------------------SEQUENCE THAT RETURNS IDLE ELEVATORS TO THEIR INITIAL STATE ---------------------->
    SEQUENCE initialState USING call_button AND current_floor AND elevator_status
    IF call_button EQUALS off AND elevator_status EQUALS waiting FOR 10 minutes AND elevator status EQUALS waiting
        SET elevator TO moving TO floor 1
        READ current_floor
        WHEN current_floor EQUALS 1 SET doors TO closed AND elevator TO idle
    ENDIF
    ENDSEQUENCE

    CALL createCallButtonList WITH battery_lowest_floor AND floor_amount
    CALL requestElevator WITH requested_floor
    CALL createElevatorList WITH elevator_amount
    CALL createFloorIndicatorList WITH elevator_amount AND current_floor
    CALL createColumnGroupList WITH served_floors AND floor_amount
    CALL initialState WITH call_button AND current_floor AND elevator_status
    
ENDDEFINE


"<------------------ELEVATOR DEFINITION---------------------->"
DEFINE Elevator USING id , AND status AND current_floor
    ID :id,
    Direction: none  // up, down
    Status : idle  // moving , inactive, waiting, stopped
    current_floor: 1
    doors: closed  // opened
'<------------------LIST OF ALL THE REQUEST THE ELEVATOR HAS TO TAKE ---------------------->
    RequestList: SET TO empty List
    SEQUENCE createRequestList WITH requested_floor
        FOR EACH requested_floor
            ADD (INSTANTIATE request WITH requested_floor ) TO RequestList
        ENDFOR
    ENDSEQUENCE
'<------------------LIST OF ALL THE FLOOR SELECTION BUTTON ---------------------->
    FloorSelectionButtonList: SET TO empty List
    SEQUENCE createFloorSelectionButtonList WITH floor_amount
        FOR floor_amount
            ADD (INSTANTIATE floor_selection_button WITH off ) TO FloorSelectionButtonList
        ENDFOR
    ENDSEQUENCE
'<------------------SEQUENCE OF MOVING THE ELEVATOR---------------------->
    SEQUENCE moveElevator USING current_direction AND requested_floor AND current_floor
        FOR EACH  elevator in ElevatorList
            IF current_direction IS down and requested_floor IS SMALLER THAN current_floor 
                SET elevator TO stopped when current_floor EQUALS requested_floor
                WHEN current_floor EQUALS requested_floor SET doors TO opened AND SET elevator To waiting
                INIT 15 Second timer WHEN timer ends SET doors TO closed AND SET elevator to moving
            ENDIF
            IF current_direction IS up and requested_floor IS greater THAN current_floor 
                SET elevator TO stopped when current_floor EQUALS requested_floor
                WHEN current_floor EQUALS requested_floor SET doors TO opened AND SET elevator To waiting
                INIT 15 Second timer WHEN timer ends SET doors TO closed AND SET elevator to moving
            ENDIF
        ENDFOR
    ENDSEQUENCE
'<------------------DOOR OPENING SEQUENCE---------------------->
    SEQUENCE openDoors USING status AND current_floor
        IF current_floor EQUALS requested_floor
            SET DOORS TO opened
        ENDIF
    ENDSEQUENCE
    CALL createRequestList WITH requested_floor
    CALL moveElevator WITH current_direction AND requested_floor AND current_floor
    CALL openDoors WITH  status AND current_floor



ENDDEFINE
"<------------------DEFINITION OF DOORS---------------------->"
DEFINE DOORS USING Status AND current_floor
    Status : opened, closed    
ENDDEFINE

"<------------------Call_buttons DEFINITION---------------------->"
DEFINE Call_Button USING status
    Status: off // on
ENDDEFINE

"<------------------Floor selection button DEFINITION---------------------->"
DEFINE Floor Selection Button USING status 
    status: off // on 
ENDDEFINE

=================================================================TESTING SECTION===================================================================================================
minimum_floor AND maximum_floor AND elevator_amount
SET column1 TO INSTANTIATE column WITH 1, 10, 2


scenario 1 
SET elevatorA TO idle AT floor 2
SET elevatorB To idle AT floor 6 
CALL requestElevator WITH 3 AND up
CALL requestFloor with 7
SEND elevatorA 

scenario 2
SET elevatorA TO idle AT floor 10
SET elevatorB To idle AT floor 3
CALL requestElevator WITH 1 AND up
CALL requestFloor WITH 6
SEND elevatorB THEN Queue new request:
CALL requestElevator WITH 3 and up
CALL requestFloor WITH 5
STOP ON floor 5 THEN STOP on floor 6
CALL requestElevator WITH 9 AND down
CALL requestFloor WITH 2 
SEND elevatorA 

scenario 3
SET elevatorA TO idle AT floor 10
SET elevatorB To moving FROM floor 3 TO floor 6
CALL requestElevator WITH 3 AND down
CALL requestFloor with 2
SEND elevatorA
CALL requestElevator WITH 10 AND down
CALL requestFloor WITH 3
SEND elevatorB

=================================================================END TESTING SECTION==============================================================================================