'// Inventory // 

'//findelevators with floor and direction

'//current_direction = "UP" or "DOWN"
'//call_button = Exterior button that calls an elevator_cage in a column
'//elevator_cage = The elevator itself
'//current_required_floor = The floor in wich a call_button has been pressed
'//responding_elevator_cage = The cage that is the closest to the caller determined by the distance between current_required_floor and the current_direction of the cage "the closest awnsers"
'//cage_doors = The function of the doors opening
'//close_doors = The function of the doors closing
'//floor_selection_button = The buttons inside the elevator that allows user to choose the floor they need to go to 
'//target_floor = floor the user has selected using floor_selection_button
'//current_floor = The floor at witch the elevator_cage is currently sitting
'//ground_floor = Ground floor of the building "refers to floor GF"
'//countdown_timer = Timer for elevator doors 
'//"destination floor ???"
'// requested_floor= based on floor_selection_button 


'<------------------SYSTEM INITIALIZATION------------------>
DEFINE init_system USING ID AND number_of_floor AND number_elevator AND status 
    SET column1 TO INSTANTIATE column WITH 1 AND number_of_floor AND number_elevator AND "ON"
    CALL column1.createElevatorList
ENDDEFINE


'<------------------COLUMN DEFINITION---------------------->
DEFINE Column USING id AND status AND floor_amount:
    ID: id,
    Status: online, offline
    ElevatorList: SET to empty List
   
    SEQUENCE createElevatorList USING elevator_amount
     SET TEMPID TO 1
        FOR elevator_amount
            ADD ( INSTANTIATE elevator WITH 1 AND "online" AND floor_amount) TO ElevatorList
            INCREMENT TEMPID
        ENDFOR
    ENDSEQUENCE
    SEQUENCE createDirectionButtonList USING ID AND direction AND  floor_amount 
     SET TEMPID TO 1
       FOR floor_amount
            ADD (INSTANTIATE direction_button WITH TEMPID AND 1 AND "UP" AND "DOWN" AND floor_amount) TO DirectionButtonList
                WHEN bottom_floor ADD EXCEPTION (INSTANTIATE direction_button WITH TEMPID AND 1 AND "DOWN") TO DirectionButtonList
                END
                WHEN top_floor ADD EXCEPTION (INSTANTIATE direction_button WITH TEMPID AND 1 AND "DOWN") TO DirectionButtonList
                END
            INCREMENT TEMPID
       ENDFOR
    ENDSEQUENCE
ENDDEFINE


'<------------------ELEVATOR DEFINITION---------------------->
DEFINE Elevator USING id , AND status AND floor_amount 
    ID :id,
    Direction: UP, DOWN
    Status : moving, idle
     FLoorSelectionButtonList: SET to empty List
    SEQUENCE createFLoorSelectionButtonList USING ID AND floor_amount AND floor_number
     SET TEMPID TO 1  
     SET floor_number to 1
        FOR floor_amount 
            ADD (INSTANTIATE floor_selection_button WITH TEMPID AND 1 AND floor_number AND floor_amount) TO FLoorSelectionButtonList
            INCREMENT TEMPID
            INCREMENT floor_number
        ENDFOR
    ENDSEQUENCE
ENDDEFINE

DEFINE DOORS USING ID AND Status
    ID: id,
    Status : opened, closed
ENDDEFINE









'<------------------MAIN SEQUENCE---------------------->
find best elevaor
return best elevator
alummer button 
recherchee meilleur 
retun elevator 
elevator.move



SEQUENCE findBestElevator USING current_required_floor AND current_direction AND current_floor AND going_direction
    FOR EACH elevator in column.ElevatorList
        IF current_direction EQUALS going_direction AND current_direction EQUALS "DOWN" AND current_floor IS GREATER THAN current_required_floor OR  current_direction EQUALS "UP" AND current_floor IS SMALLER THAN current_required_floor THEN
        ENDIF
        RETURN best_elevator
    ENDFOR
ENDSEQUENCE

SEQUENCE requestElevator USING current_required_floor AND current_direction AND going_direction AND direction_button AND floor_selection_button AND selected_floor    ' ----.parametre
        FOR EACH elevator in column.ElevatorList
            IF direction_button EQUALS "pressed"
                READ current_required_floor 
                READ going_direction
                CALL findBestElevator
                SET best_elevator TO "MOVING" TO current_required_floor
                WHEN current_floor EQUALS current_required_floor SET doors TO "opened"

            ELSE IF direction_button EQUALS "not pressed" AND floor_selection_button EQUALS "pressed" 
                SET doors TO "closed"
                SET elevator TO "moving" TO selected_floor
             WHEN current_floor EQUALS selected_floor SET doors TO "opened"

            ENDIF
        ENDFOR
ENDSEQUENCE

SEQUENCE initialState USING floor_amount AND current_floor
    IF direction_button AND floor_selection_button EQUALS "not pressed" FOR 5 minutes
        SET elevator TO "moving" TO floor 1
        READ current_floor
        WHEN current_floor EQUALS 1 SET doors TO "closed" AND elevator TO "idle"
    ENDIF
ENDSEQUENCE

        

