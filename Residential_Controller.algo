'// Inventory // 

'//findelevators with floor and direction

'//current_direction = "UP" or "DOWN"
'//call_button = Exterior button that calls an elevator_cage in a column
'//elevator_cage = The elevator itself
'//current_required_floor = The floor in wich a call_button has been pressed
'//responding_elevator_cage = The cage that is the closest to the caller determined by the distance between current_required_floor and the current_direction of the cage "the closest awnsers"
'//cage_doors = The function of the doors opening
'//close_doors = The function of the doors closing
'//floor_selection_button = The buttons inside the elevator that allows user to choose the floor they need to go to 
'//target_floor = floor the user has selected using floor_selection_button
'//current_floor = The floor at witch the elevator_cage is currently sitting
'//ground_floor = Ground floor of the building "refers to floor GF"
'//countdown_timer = Timer for elevator doors 
'//"destination floor ???"
'// requested_floor= based on floor_selection_button 


'<------------------SYSTEM INITIALIZATION------------------>
DEFINE init_system USING ID AND number_of_floor AND number_elevator AND status 
    SET column1 TO INSTANTIATE column WITH 1 AND number_of_floor AND number_elevator AND "ON"
    CALL column1.createElevatorList
ENDDEFINE


'<------------------COLUMN DEFINITION---------------------->
DEFINE Column USING id AND status AND floor_amount:
    ID: id,
    Status: online, offline
    ElevatorList: SET to empty List
   
    SEQUENCE createElevatorList USING elevator_amount
     SET TEMPID TO 1
        FOR elevator_amount
            ADD ( INSTANTIATE elevator WITH 1 AND "online" AND floor_amount) TO ElevatorList
            INCREMENT TEMPID
        ENDFOR
    ENDSEQUENCE
    SEQUENCE createDirectionButtonList USING ID AND direction AND  floor_amount 
     SET TEMPID TO 1
       FOR floor_amount
            ADD (INSTANTIATE direction_button WITH TEMPID AND 1 AND "UP" AND "DOWN" AND floor_amount) TO DirectionButtonList
                WHEN bottom_floor ADD EXCEPTION (INSTANTIATE direction_button WITH TEMPID AND 1 AND "DOWN") TO DirectionButtonList
                END
                WHEN top_floor ADD EXCEPTION (INSTANTIATE direction_button WITH TEMPID AND 1 AND "DOWN") TO DirectionButtonList
                END
            INCREMENT TEMPID
       ENDFOR
    ENDSEQUENCE
ENDDEFINE


'<------------------ELEVATOR DEFINITION---------------------->
DEFINE Elevator USING id , AND status AND floor_amount
    ID :id,
    Direction: UP, DOWN
    Status : moving, idle
     FLoorSelectionButtonList: SET to empty List
    SEQUENCE createFLoorSelectionButtonList USING ID AND floor_amount AND floor_number
     SET TEMPID TO 1  
     SET floor_number to 1
        FOR floor_amount 
            ADD (INSTANTIATE floor_selection_button WITH TEMPID AND 1 AND floor_number AND floor_amount) TO FLoorSelectionButtonList
            INCREMENT TEMPID
            INCREMENT floor_number
        ENDFOR
    ENDSEQUENCE

     ElevatorDoorList: SET to empty List
    SEQUENCE createElevatorDoorList USING ID AND status AND elevator_amount
     SET TEMPID TO 1
     SET elevator_amount TO 1 
        FOR elevator_amount
            ADD ( INSTANTIATE elevator_door with TEMPID AND 1 AND status AND elevator_amount) TO elevator
            INCREMENT TEMPID
            INCREMENT elevator_amount
        ENDFOR
    ENDSEQUENCE
ENDDEFINE


'<------------------FLOOR DEFINITION---------------------->
DEFINE Floor USING id AND status AND floor_amount :
    ID: id,
    Status: requested, not_requested

    DirectionButtonList: SET TO empty List
    SEQUENCE createDirectionButtonList USING ID AND direction AND  floor_amount 
     SET TEMPID TO 1
       FOR floor_amount
            ADD (INSTANTIATE direction_button WITH TEMPID AND 1 AND "UP" AND "DOWN" AND floor_amount) TO DirectionButtonList
                WHEN bottom_floor ADD EXCEPTION (INSTANTIATE direction_button WITH TEMPID AND 1 AND "DOWN") TO DirectionButtonList
                END
                WHEN top_floor ADD EXCEPTION (INSTANTIATE direction_button WITH TEMPID AND 1 AND "DOWN") TO DirectionButtonList
                END
            INCREMENT TEMPID
       ENDFOR
    ENDSEQUENCE

    FLoorDoorList: SET to empty List
    SEQUENCE createFloorDoorList USING ID AND status AND floor_amount
     SET TEMPID TO 1
     SET floor_amount TO 1 
        FOR floor_amount
            ADD ( INSTANTIATE floor_door with TEMPID AND 1 AND status AND floor_amount) TO FloorDoorList
            INCREMENT TEMPID
            INCREMENT floor_amount
        ENDFOR
    ENDSEQUENCE
ENDDEFINE

'<------------------DIRECTION BUTTONS DEFINITION---------------------->
DEFINE Direction Buttons USING id AND properties AND status AND floor_amount :
    ID: id,
    properties: UP, DOWN
    Status: pressed, not pressed
    SET TEMPID TO 1
    SET floor_amount TO 1
    FOR EACH floor_amount
        ADD (INSTANTIATE direction_button with TEMPID AND 1 AND "UP" AND "DOWN" AND pressed AND floor_amount) TO floor
        INCREMENT TEMPID
    ENDFOR
    SET direction_button TO not pressed
ENDDEFINE






'<------------------MAIN SEQUENCE---------------------->


SEQUENCE requestElevator USING current_required_floor AND current_direction AND elevator
    SET current_required_floor TO "3"
    SET current _direction TO "UP"
        FOR EACH elevator
            IF direction_button is pressed 
                READ current_required_floor 
                    IF current_direction EQUALS requested_direction
                        SET elevator TO "moving" TO requested_floor
                    ELSE 
                        SET destination_floor TO current_required_floor
                    ENDIF
                END
            ENDIF
        ENDFOR
    CALL boardingElevator
ENDSEQUENCE




SEQUENCE boardingElevator USING current_floor, target_floor and current_required_floor
    WHEN elevator EQUALS current_required_floor 
        SET cage_doors TO "OPENED"
    IF floor_selection_button is pressed THEN INIT 5 second countdown
            WHEN 5 second countdown is done
                SET cage_doors TO "CLOSED"
               SET elevator_cage TO "MOVING" TO target_floor
                IF call_button is pressed between target_floor AND current_floor AND requested_direction IS EQUAL TO current_direction 
                    SET ele
                    SET cage_doors TO "OPENED"
                    SET countdown_timer TO 5 seconds
                    INIT countdown_timer
                         WHEN 5 second countdown is done
                             SET cage_doors TO "CLOSED"
                    ELSE SET elevator TO "MOVING" TO target_floor 
                        SET cage_doors TO "OPENED"
                        SET countdown_timer TO 5 second
                            INIT countdown_timer
                            ON countdown_timer END 
                            SET cage_doors TO "CLOSED" 
                ENDIF  
        
    ELSE
         INIT 5 second countdown
            WHEN 5 second countdown is done
                SET cage_doors TO "CLOSED"

    ENDIF

REPEAT 
    SEQUENCE #2 
UNTIL 
    no buttons are pressed
ENDSEQUENCE

SEQUENCE 
    IF no buttons are pressed AND Elevator are inactive FOR 15 minutes
        Elevator goes back to ground_floor "floor GF"
    ENDIF
    SET current_floor TO 1 
ENDSEQUENCE

        

